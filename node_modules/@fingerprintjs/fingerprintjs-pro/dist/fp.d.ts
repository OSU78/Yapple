/**
 * FingerprintJS Pro v3.6.3 - Copyright (c) FingerprintJS, Inc, 2022 (https://fingerprintjs.com)
 *
 * This software contains code from open-source projects:
 * MurmurHash3 by Karan Lyons (https://github.com/karanlyons/murmurHash3.js)
 */

interface Confidence {
    /**
     * A number between 0 and 1 that tells how much the agent is sure about the visitor identifier.
     * The higher the number, the higher the chance of the visitor identifier to be true.
     */
    score: number;
    /**
     * Additional details about the score as a human-readable text
     */
    comment?: string;
}
interface ZeroTrust {
    /**
     * Fields from the result object that have been hidden (values replaced with empty data)
     */
    hiddenFields: string[];
    /**
     * Additional details about the reasons as a human-readable text
     */
    comment?: string;
}
/**
 * IP address location. Can be empty for anonymous proxies.
 */
interface IpLocation {
    /**
     * IP address location detection radius. Smaller values (<50mi) are business/residential,
     * medium values (50 < x < 500) are cellular towers (usually),
     * larger values (>= 500) are cloud IPs or proxies, VPNs.
     * Can be missing, in case of Tor/proxies.
     */
    accuracyRadius?: number;
    /**
     * Latitude
     * Can be missing, in case of Tor/proxies.
     * @example
     * -19.8975
     */
    latitude?: number;
    /**
     * Longitude
     * Can be missing, in case of Tor/proxies.
     * @example
     * -43.9625
     */
    longitude?: number;
    /**
     * Timezone of the IP address location
     * @example
     * 'America/Chicago'
     */
    timezone?: string;
    /**
     * Postal code, when available
     */
    postalCode?: string;
    /**
     * City, when available
     */
    city?: {
        name: string;
    };
    /**
     * Administrative subdivisions array (for example states|provinces -> counties|parishes).
     * Can be empty or missing.
     * When not empty, can contain only top-level administrative units within a country, e.g. a state.
     */
    subdivisions?: [
        {
            isoCode: string;
            name: string;
        }
    ];
    /**
     * Country, when available. Will be missing for Tor/anonymous proxies.
     */
    country?: {
        code: string;
        name: string;
    };
    /**
     * Continent, when available. Will be missing for Tor/anonymous proxies.
     */
    continent?: {
        code: string;
        name: string;
    };
}
/**
 * @deprecated Not used. Left for backward compatibility.
 */
declare type FullIpLocation = IpLocation;
interface BotInformation {
    /**
     * @deprecated Agent doesn't detect bots
     */
    probability: number;
    /**
     * @deprecated Agent doesn't detect bots
     */
    safe?: boolean;
}
interface SeenAt {
    /**
     * The date and time within your subscription. The string format is ISO-8601.
     * @example
     * '2022-03-16T05:18:24.610Z'
     * new Date(result.firstSeenAt.subscription)
     */
    subscription: string | null;
    /**
     * The date and time across all subscription. The string format is ISO-8601.
     * @example
     * '2022-03-16T05:18:24.610Z'
     * new Date(result.firstSeenAt.global)
     */
    global: string | null;
}
/**
 * Result of requesting a visitor id
 */
interface VisitorId {
    /**
     * The visitor identifier
     */
    visitorId: string;
    /**
     * If true, this visitor was found and visited before.
     * If false, this visitor wasn't found and probably didn't visit before.
     */
    visitorFound: boolean;
    /**
     * A confidence score that tells how much the agent is sure about the visitor identifier
     */
    confidence: Confidence;
    /**
     * An object that tells what fields were hidden (values replaced with empty data)
     */
    zeroTrust?: ZeroTrust;
}
/**
 * Result of requesting a visitor id when requested with `extendedData: true`
 */
interface ExtendedVisitorId extends VisitorId {
    /**
     * Whether the visitor is in incognito/private mode
     */
    incognito: boolean;
    /**
     * Browser name
     * @example
     * 'Safari'
     * @example
     * 'Chrome'
     */
    browserName: string;
    /**
     * Browser version
     * @example
     * '78.0.3904'
     */
    browserVersion: string;
    /**
     * Device.
     * For desktop/laptop devices, the value will be "Other"
     * @example
     * 'Samsung SM-J330F'
     */
    device: string;
    /**
     * IP address. Only IPv4 are returned.
     * @example
     * '191.14.35.17'
     */
    ip: string;
    /**
     * IP address location. Can be empty for anonymous proxies
     */
    ipLocation?: IpLocation;
    /**
     * OS name.
     * @example
     * 'Mac OS X'
     * @example
     * 'Windows'
     * @example
     * 'Android'
     */
    os: string;
    /**
     * OS version
     * @example
     * '10.13.6'
     */
    osVersion: string;
    /**
     * When the visitor was seen for the first time
     */
    firstSeenAt: SeenAt;
    /**
     * When the visitor was seen previous time
     */
    lastSeenAt: SeenAt;
    /**
     * @deprecated Agent doesn't detect bots
     */
    bot?: BotInformation;
}

interface ResultExtraFields {
    /**
     * The current request identifier. It's different for every request.
     */
    requestId: string;
}
/**
 * Result of getting a visitor id.
 *
 * visitorId can be empty string when the visitor can't be identified.
 * It happens only with bots and hackers that modify their browsers.
 */
declare type GetResult = VisitorId & ResultExtraFields;
/**
 * Result of getting a visitor id when requested with `extendedData: true`
 */
declare type ExtendedGetResult = ExtendedVisitorId & ResultExtraFields;
/**
 * @deprecated Not used. Left for backward compatibility.
 */
declare type FullIpExtendedGetResult = ExtendedGetResult;

declare const ERROR_WRONG_REGION: string;
declare const ERROR_SUBSCRIPTION_NOT_ACTIVE: string;
declare const ERROR_UNSUPPORTED_VERSION: string;
declare const ERROR_INSTALLATION_METHOD_RESTRICTED: string;
declare const ERROR_FORBIDDEN_ENDPOINT: string;

/**
 * Handles a debug event
 */
declare type PublicDebugOutput = (event: {
    e: number;
}) => void;

declare type Region = 
/** N. Virginia, USA */
'us'
/** Frankfurt, Germany */
 | 'eu'
/** Mumbai, India */
 | 'ap';
/**
 * @deprecated Not used
 */
declare type IPResolution = 'city' | 'full';
declare type ApiKeyOptions = {
    /** Public API key */
    apiKey?: string;
    /** @deprecated Use the `apiKey` option instead */
    token: string;
} | {
    /** Public API key */
    apiKey: string;
    /** @deprecated Use the `apiKey` option instead */
    token?: string;
};
declare type CommonLoadOptions = ApiKeyOptions & {
    /**
     * Region of the FingerprintJS service server
     * @default 'us'
     */
    region?: Region;
    /**
     * Your custom API endpoint for getting visitor data.
     * @example
     * 'https://fp.example.com'
     */
    endpoint?: string;
    /**
     * Your custom TLS endpoint.
     * @example
     * 'https://tls.fp.example.com'
     */
    tlsEndpoint?: string;
    /**
     * Disables the extra TLS request
     */
    disableTls?: boolean;
    /**
     * Override storages name (cookies, localStorage, etc).
     * Should only be used when the default name conflicts with some of your existing names.
     * @default '_vid'
     */
    storageKey?: string;
    /**
     * A time delay in milliseconds to use instead of `requestIdleCallback` when it's unavailable.
     * @default 50
     */
    delayFallback?: number;
    /**
     * Information about libraries and services used to integrate the JS agent.
     * Each array item means a separate integration, the order doesn't matter.
     * An example of an integration library is FingerprintJS Pro React.
     */
    integrationInfo?: readonly string[];
};
/**
 * Options for FingerprintJS agent loading
 */
declare type PublicLoadOptions = CommonLoadOptions & {
    /**
     * If you need to debug the agent, set a debug output channel here.
     *
     * Warning! This is an experimental API, it's out of Semantic Versioning, i.e. may have incompatible changes within
     * a major version.
     */
    debug?: PublicDebugOutput;
};
/**
 * Options of getting a visitor identifier.
 *
 * The TypeScript `TIP` parameter does nothing and is left for backward compatibility. It will be removed later.
 */
interface PublicGetOptions<TExtended extends boolean, TIP = unknown> {
    /**
     * Controls client-side timeout. Client timeout controls total time (both client-side and server-side) that any
     * identification event is allowed to run. It doesn't include time when the page is in background (not visible).
     * The value is in milliseconds.
     * @default 10000
     */
    timeout?: number;
    /**
     * `Tag` is a user-provided value or object that will be returned back to you in a webhook message.
     * You may want to use the `tag` value to be able to associate a server-side webhook event with a web request of the
     * current visitor.
     *
     * What values can be used as a `tag`?
     * Anything that identifies a visitor or a request.
     * You can pass the requestId as a `tag` and then get this requestId back in the webhook, associated with a visitorId.
     */
    tag?: unknown;
    /**
     * `linkedId` is a way of linking current identification event with a custom identifier.
     * This can be helpful to be able to filter API visit information later.
     */
    linkedId?: string;
    /**
     * Prevents agent from waiting for the TLS request to complete.
     *
     * @deprecated Use the `disableTls` option of `load()` instead
     */
    disableTls?: boolean;
    /**
     * Adds details about the visitor to the result
     */
    extendedResult?: TExtended;
    /**
     * @deprecated Does nothing
     */
    ipResolution?: TIP;
    /**
     * (does nothing)
     *
     * @deprecated Use the `debug` option of `load()` instead
     */
    debug?: boolean;
}

/**
 * Derives the get result type based on input options
 */
declare type DeriveGetResult<TExtended extends boolean> = TExtended extends true ? ExtendedGetResult : GetResult;
/**
 * Agent object that can get visitor identifier
 */
interface PublicAgent {
    /**
     * Gets the visitor identifier.
     * See the `ERROR_...` constants for expected error messages.
     * When an error is emitted by the backend, it gets a `requestId` field, same as in successful result.
     *
     * The TypeScript `TIP` parameter does nothing and is left for backward compatibility. It will be removed later.
     */
    get<TExtended extends boolean = false, TIP = unknown>(options?: Readonly<PublicGetOptions<TExtended, TIP>>): Promise<DeriveGetResult<TExtended>>;
}

declare const ERROR_CLIENT_TIMEOUT = "Client timeout";
declare const ERROR_NETWORK_CONNECTION = "Network connection error";
declare const ERROR_NETWORK_ABORT = "Network request aborted";
declare const ERROR_BAD_RESPONSE_FORMAT = "Response cannot be parsed";

declare const ERROR_API_KEY_MISSING: string;
declare const ERROR_API_KEY_INVALID: string;
declare const ERROR_API_KEY_EXPIRED: string;
declare const ERROR_BAD_REQUEST_FORMAT: string;
declare const ERROR_GENERAL_SERVER_FAILURE: string;
declare const ERROR_SERVER_TIMEOUT: string;
declare const ERROR_RATE_LIMIT: string;
declare const ERROR_FORBIDDEN_ORIGIN: string;
declare const ERROR_FORBIDDEN_HEADER: string;
/** @deprecated Use ERROR_API_KEY_MISSING instead */
declare const ERROR_TOKEN_MISSING: string;
/** @deprecated Use ERROR_API_KEY_INVALID instead */
declare const ERROR_TOKEN_INVALID: string;
/** @deprecated Use ERROR_API_KEY_EXPIRED instead */
declare const ERROR_TOKEN_EXPIRED: string;

declare type LoadOptions = PublicLoadOptions & {
    /**
     * The pattern of the JS agent script URL.
     *
     * The following substrings are replaced:
     * - <version> — the major version of JS agent;
     * - <apiKey> — the public key set via the `apiKey` option;
     * - <loaderVersion> — the version of this package;
     */
    scriptUrlPattern?: string;
};
declare const ERROR_SCRIPT_LOAD_FAIL = "Failed to load the JS script of the agent";
declare function load({ scriptUrlPattern, token, apiKey, ...options }: LoadOptions): Promise<PublicAgent>;

declare const _default: {
    load: typeof load;
    ERROR_SCRIPT_LOAD_FAIL: string;
    ERROR_API_KEY_EXPIRED: string;
    ERROR_API_KEY_INVALID: string;
    ERROR_API_KEY_MISSING: string;
    ERROR_BAD_REQUEST_FORMAT: string;
    ERROR_BAD_RESPONSE_FORMAT: string;
    ERROR_CLIENT_TIMEOUT: string;
    ERROR_FORBIDDEN_ENDPOINT: string;
    ERROR_FORBIDDEN_HEADER: string;
    ERROR_FORBIDDEN_ORIGIN: string;
    ERROR_GENERAL_SERVER_FAILURE: string;
    ERROR_INSTALLATION_METHOD_RESTRICTED: string;
    ERROR_NETWORK_ABORT: string;
    ERROR_NETWORK_CONNECTION: string;
    ERROR_RATE_LIMIT: string;
    ERROR_SERVER_TIMEOUT: string;
    ERROR_SUBSCRIPTION_NOT_ACTIVE: string;
    ERROR_TOKEN_EXPIRED: string;
    ERROR_TOKEN_INVALID: string;
    ERROR_TOKEN_MISSING: string;
    ERROR_UNSUPPORTED_VERSION: string;
    ERROR_WRONG_REGION: string;
};

export default _default;
export { PublicAgent as Agent, Confidence, ERROR_API_KEY_EXPIRED, ERROR_API_KEY_INVALID, ERROR_API_KEY_MISSING, ERROR_BAD_REQUEST_FORMAT, ERROR_BAD_RESPONSE_FORMAT, ERROR_CLIENT_TIMEOUT, ERROR_FORBIDDEN_ENDPOINT, ERROR_FORBIDDEN_HEADER, ERROR_FORBIDDEN_ORIGIN, ERROR_GENERAL_SERVER_FAILURE, ERROR_INSTALLATION_METHOD_RESTRICTED, ERROR_NETWORK_ABORT, ERROR_NETWORK_CONNECTION, ERROR_RATE_LIMIT, ERROR_SCRIPT_LOAD_FAIL, ERROR_SERVER_TIMEOUT, ERROR_SUBSCRIPTION_NOT_ACTIVE, ERROR_TOKEN_EXPIRED, ERROR_TOKEN_INVALID, ERROR_TOKEN_MISSING, ERROR_UNSUPPORTED_VERSION, ERROR_WRONG_REGION, ExtendedGetResult, FullIpExtendedGetResult, FullIpLocation, PublicGetOptions as GetOptions, GetResult, IPResolution, IpLocation, LoadOptions, Region, ZeroTrust, load };
